객체지향 프로그래밍
객체지향언어는 기존의 프로그래밍언어와 달느 전혀 새로운 것이 아니라, 기존의 프로그램이 언어에 몇 가지 새로운 규칙을 추가한 보다 발전된 형태의 것이다.
이러한 규칙들을 이용해서 코드 간에 서로 관계를 맺어 줌으로써 보다 유기적으로 프로그램을 구성하는 것이 가능해졌다.
기존의 프로그래밍 언어에 익숙한 프로그래밍 습관을 객채지향적으로 바꾸도록 노력해야 할 것이다.
객체지향언어의 주요 특징은 다음과 같다.
1. 코드의 재사용성이 높다.
- 새로운 코드를 작성할 때 기존의 코드를 이용하여 쉽게 작성할 수 있다.
2. 코드의 관리가 용이하다.
- 코드간의 관계를 이용해서 적은 노력으로 쉽게 코드를 변경할 수 있다.
3. 신뢰성이 높은 프로그래밍을 가능하게 한다.
- 제어자의 메소드를 이용해서 데이터를 보호하고 올바른 값을 유지하도록 하며, 코드의 중복을 제거하여 코드의 불일치로 인한 오동작을 방지할 수 있다.

객체지향언어의 가장 큰 장점은 '코드의 재사용성이 높고 유지보수가 용이하다'는 것이다. 이러한 객체지향언어의 장점은 프로그램의 개발과 유지보수에 드는 시간과 비용을 획기적으로 개선하였다.
앞으로 상속, 다형성과 같은 객체지향개념을 학습할 때 재사용성과 유지보수 그리고 중복된 코드의 제거, 이 세 가지 관점에서 보면 보다 쉽게 이해할 수 있을 것이다.
객체지향 프로그래밍은 프로그래머에게 거시적 관점에서 관점에서 설계할 수 있는 능력을 요구하기 때문에 객체지향개념을 이해했다 하더라도 자바의 객체지향적 장점들을 충분히 활용한 프로그램을 작성하기란 쉽지 않을 것이다.
너무 객체지향개념에 얽매여서 고민하기 보다는 일단 프로그램을 기능적으로 완성한 다음 어떻게 하면 보다 객체지향적으로 코드를 개선할 수 있을지를 고민하여 점차 개선해 나가는 것이 좋다.
이러한 경험들이 축적되어야 프로그램을 객체지향적으로 설계할 수 있는 능력이 길러지는 것이지 처음부터 이론을 많이 안다고 해서 좋은 설계를 할 수 있는 것은 아니다.

클래스와 객체
클래스란 '객체를 정의해놓은 것' 또는 클래스는' 객체의 설계도 또는 틀'이라고 정의할 수 있다.
클래스는 객체를 생성하는데 사용되며, 객체는 클래스에 정의된 대로 생성된다.

클래스의 정의	클래스란 객체를 정의해 놓은 것
클래스의 용도	클래스는 객체를 생성하는데 사용

객체의 사전적인 정의는, '실제로 존재하는 것'이다. 우리가 주변에서 볼 수 있는 책상, 의자, 자동차와 같은 사물들이 곧 객체이다.
객체지향이론에서는 사물과 같은 유형적인 것뿐만 아니라, 개념이나 논리와 같은 무형적인 것들도 객체로 간주한다.
프로그래밍에서의 객체는 클래스에 정의된 내용대로 메모리에 생성된 것을 뜻한다.

객체의 정의	실제로 존재하는 것, 사물 또는 개념
객체의 용도	객체가 가지고 있는 기능과 속성에 따라 다름
유형의 객체	책상, 의자, 자동차, TV와 같은 사물
무형의 객체	수학공식, 프로그램 에러와 같은 논리나 개념

클래스와 객체의 관계를 우리가 살고 있는 실생활에서 예를 들면, 제품 설계도와 제품과의 관계라고 할 수 있다.
예를 들면, TV 설계도(클래스)는 TV라는 제품(객체)을 정의한 것이며, TV(객체)를 만드는데 사용된다.
또한 클래스는 단지 객체를 생성하는데 사용될 뿐, 객체 그 자체는 아니다. 우리가 원하는 기능의 객체를 사용하기 위해서는 먼저 클래스로부터 객체를 생성하는 과정이 선행되어야 한다.
프로그래밍에서는 먼저 클래스를 작성한 다음, 클래스로부터 객체를 생성하여 사용한다.
클래스를 정의하고 클래스를 통해 객체를 생성하는 이유는 설계도를 통해서 제품을 만드는 이유와 같다.
하나의 설계도만 잘 만들어 놓으면 제품을 만드는 일이 쉬워지기 때문이다.

객체의 구성요소 - 속성와 기능
객체는 속성과 기능, 두 종류의 구성요소로 이루어져 있으며, 일반적으로 객체는 다수의 속성과 다수의 기능을 갖는다.
즉, 객체는 속성과 기능의 집합이라고 할 수 있다. 글리고 객체가 가지고 있는 속성과 기능을 그 객체의 멤버(구성원, member)라 한다.
클래스란 객체를 정의한 것이므로 클래스에는 객체의 모든 속성과 기능이 정의되어 있다. 클래스로부터 객체를 생성하면, 클래스에 정의된 속성과 기능을 가진 객체가 만들어지는 것이다.
객체지향 프로그래밍에서는 속성과 기능을 각각 변수와 메소드로 표현한다.
속성(property) -> 멤버변수(variable)
기능(function) -> 메소드(method)

객체와 인스턴스
클래스로부터 객체를 만드는 과정을 클래스의 인스턴스화(instantiate)라고 하며, 어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스(instance)라고 한다.
예를 들면, TV 클래스로부터 만들어진 객체를 TV클래스의 인스턴스라고 한다. 결국 인스턴스는 객체와 같은 의미이지만, 객체는 모든 인스턴스를 대표하는 포괄적인 의미를 갖고 있으며, 인스턴스는 어떤 클래스로부터 만들어진 것인지를 보다 강조하는 의미를 갖고 있다.
인스턴스와 객체느 같은 의미이므로 두 용어의 사용을 엄격히 구분할 필요는 없지만, 위의 예에서 본 것과 같이 문맥에 따라 구별하여 사용하는 것이 좋다.
클래스 ->(인스턴스화) 인스턴스(객체)

한 파일에 여러 클래스 작성하기
하나의 소스파일에 하나의 클래스만을 정의하는 것이 보통이지만, 하나의 소스파일에 둘 이상의 클래스를 정의하는 것도 가능하다.
이 때 주의해야할 점은 '소스파일의 이름은 public class의 이름과 일치해야 한다는 것이다' 만일 소스파일 내에 public class가 없다면, 소스 파일의 이름은 소스파일 내의 어떤 클래스의 이름으로 해도 상관없다.
소스파일(*.java)과 달리 클래스파일(*.class).은 클래스마다 하나씩 만들어진다.

객체배열
많은 수의 객체를 다뤄야할 때, 배열로 다루면 편리할 것이다. 객체 역시 배열로 다루는 것이 가능하며, 이를 '객체 배열'이라고 한다.
그렇다고 객체 배열 안에 객체가 저장되는 것은 아니고, 객체의 주소가 저장된다. 사실 객체 배열은 참조변수들을 하나로 묶은 참조변수 배열인 것이다.
Tv tv1, tv2, tv3;	->	Tv[] tvArr = new Tv[3];
길이가 3인 객체 배열 tvArr을 아래와 같이 생성하면, 각 요소는 참조변수의 기본값은 null로 자동 초기화 된다.
그리고 이 객체 배열은 3개의 객체, 정확히는 객체의 주소,를 저장할 수 있다.
Tv[] tvArr = new Tv[3];	//길이가 3인 Tv타입의 참조변수 배열

객체 배열을 생성하는 것은, 그저 객체를 다루기 위한 참조변수들이 만들어진 것일 뿐, 아직 객체가 저장되지 않았다.
객체를 생성해서 객체 배열의 각 요소에 저장하는 것을 잊으면 안 된다.
Tv[] tvArr = new Tv[3];	//참조변수 배열(객체 배열)을 생성
//객체를 생성해서 배열의 각 요소에 저장
tvArr[0] = new Tv();
tvArr[1] = new Tv();
tvArr[2] = new Tv();
배열의 초기화 블럭을 사용하면, 다음과 같이 한 줄로 간단히 할 수 있다.
Tv[] tvArr = {new Tv(), new Tv(), new Tv() };

다뤄야 할 객체의 수가 많을 때는 for문을 사용하면 된다.
Tv[] tvArr = new Tv[100];
for (int i =0; i < tvArr.length; i++) {
	tvArr[i] = new Tv();
}

