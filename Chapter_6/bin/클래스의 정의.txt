클래스의 정의(1) - 데이터와 함수의 결합
클래스는 '객체를 생성하기 위한 틀'이며 '클래스는 속성과 기능으로 정의되어 있다.'고 했다.
이것은 객체지향이론의 관점에서 내린 정의이다.
프로그래밍언어에서 데이터 처리를 위한 데이터 저장형태의 발전과정은 다음과 같다
변수 -> 배열 -> 구조체 -> 클래스

1. 변수 : 하나의 데이터를 저장할 수 있는 공간
2. 배열 : 같은 종류의 여러 데이터를 하나의 집합으로 저장할 수 있는 공간
3. 구조체 : 서로 관련된 여러 데이터를 종류에 관계없이 하나의 집합으로 저장할 수 있는 공간
4. 클래스 : 데이터와 함수의 겷바 (구조체 + 함수)

하나의 데이터를 저장하기 위한 변수를, 그리고 같은 종류의 데이터를 보다 효율적으로 다루기 위해서 배열이라는 개념을 도입했으며, 후에는 구조체(Structure)가 등장하여 자료형의 종류에 상관없이 서로 관계가 깊은 변수들을 하나로 묶어서 다룰 수 있도록 한다.
그동안 데이터와 함수가 서로 관계가 없는 것처럼 데이터는 데이터끼리, 함수는 함수끼리 따로 다루어져 왔지만, 사실 함수는 주로 데이터를 가지고 작업을 하기 때문에 많은 경우에 있어서 데이터와 함수는 관계가 깊다.
그래서 자바와 같은 객체지향언어에서는 변수(데이터)와 함수를 하나의 클래스에 정의하여 서로 관계가 깊은 변수와 함수들을 함께 다룰 수 있게 했다.
서로 관련된 변수들을 저의하고 이들에 대한 작업을 수행하는 함수들을 함께 정의한 것이 바로 클래스이다.
C언어에서는 문자열을 문자의 배열로 다루지만, 자바에서는 String이라는 클래스로 문자열을 다룬다. 문자열을 단순히 문자의 배열로 정의하지 않고 클래스로 정의한 이유는 문자열과 문자열을 다루는데 필요한 함수들을 함께 묶기 위해서이다.

클래스의 정의(2) - 사용자 정의 타입
프로그래밍언어에서 제공하는 기본 자료형(primitive type) 외에 프로그래머가 서로 관련된 변수들을 묶어서 하나의 타입으로 새로 추가하는 것을 '사용자정의 타입(user-defined type)'이라고 한다.
다른 프로그래밍언어에서도 사용자정의 타입을 정의할 수 있는 방법을 제공하고 있으며 자바와 같은 객체지향언어에서는 클래스가 곧 사용자 정의 타입이다.
기본형의 개소는 8개로 정해져 있지만 참조형의 개수가 정해져 있지 않은 이유는 이처럼 프로그래머가 새로운 타입을 추가할 수 있기 때문이다.

int hour;		//시간을 표현하기 위한 변수
int minute;	//분을 표현하기 위한 변수
float second;	//초를 표현하기 위한 변수, 1/100초까지 표현하기 위해 float로 했다.

시간을 표현하기 위해서 위와 같이 3개의 변수를 선언하였다. 만일 3개의 시간을 다뤄야 한다면 다음과 같이 해야 할 것이다.

int hour1, hour2, hour3;
int minute1, minute2, minute3;
float second1, second2, second3;

이처럼 다뤄야 하는 시간의 개수가 늘어날 때마다 시,분,초를 위한 변수를 추가해줘야 하는데 데이터의 개수가 많으면 이런 식으로는 곤란하다.

int[] hour = new int[3];
int[] minute = new int[3];
float[] second = new float[3];

위와 같이 배열로 처리하면 다뤄야 하는 시간 데이터의 개수가 늘어나더라고 배열의 크기만 변경해주면 되므로, 변수를 매번 새로 선언해줘야 하는 불편함과 복잡함은 없어졌다. 그러나 하나의 시간을 구성하는 시, 분, 초가 서로 분리되어 있기 때문에 프로그램 수행과정에서 시, 분, 초가 따로 뒤섞여서 올바르지 않은 데이터가 될 가능성이 있다.
이런 경우 시, 분, 초를 하나로 묶는 사용자정의 타입, 즉 클래스를 정의하여 사용해야 한다.

class Time {
	int hour;
	int minute;
	float second;
}

위의 코드를 앞서 Time클래스를 이용해서 변경하면 다음과 같다
	비객체지향적 코드			객체지향적 코드
int hour1, hour2, hour3;		Time t1 = new Time();
int minute1, minute2, minute3;	Time t2 = new Time();
float second1, second2, second3;	Time t3 = new Time();
int[] hour = new int[3];		Time[] t = new Time[3];
int[] minute = new int[3];		t[0] = new Time();
float[] second = new float[3];	t[1] = new Time(); , t[2] = new Time();

이제 시, 분, 초가 하나의 단위로 묶여서 다루어지기 때문에 다른 시간 데이터와 섞이는 일은 없겠지만, 시간 데이터에는 다음과 같은 추가적인 제약조건이 있다.
1. 시, 분, 초는 모두 0보다 크거나 같아야 한다.
2. 시의 범위는 0 ~ 23, 분과 초의 범위는 0 ~ 59이다.

이러한 조건들이 모두 프로그램 코드에 반영될 때, 보다 정확한 데이터를 유지할 수 있을 것이다.
객체지향언어가 아닌 언어에서는 이러한 추가적인 조건들을 반영하기가 어렵다.
그러나 객체지향언어에서는 제어자와 메소드를 이용해서 이러한 조건들을 코드에 쉽게 반영할 수 있다.

public class Time {
	private int hour;
	private int minute;
	private float second;
	
	//hour의 값을 변경하기 위한 메소드, 지정한 값이 0보다 작거나 23보다 크면
	//즉, 유효한 값이 아니면 변경하지 않고 메소드를 종료(return)한다.
	public void setHour(int h) {
		if (h < 0 || h > 23) return;
		hour = h;		//지정된 값(h)이 유효한 경우에만 hour를 변경ㄴ
	}
}

제어자를 이용해서 변수의 값을 직접 변경하지 못하게 하고, 대신 메소드를 통해서 값을 변경하도록 작성하였다.
값을 변경할 때 지정된 값의 유효성을 조건문으로 점검한 다음에 유효한 값일 경우에만 변경한다.

선언위치에 따른 변수의 종류
변수는 클래스 변수, 인스턴스 변수, 지역변수 모두 세 종류가 있다. 변수의 종류를 결정짓는 중요한 요소는 '변수의 선언 위치'이므로 변수의 종류를 파악하기 위해서는 변수가 어느 영역에 선언되었는지를 확인하는 것이 중요하다.
멤버변수를 제외한 나머지 변수들은 모두 지역변수이며, 멤버변수 중 static이 붙은 것은 클래스 변수, 붙지 않은 것은 인스턴스 변수이다.

	변수의 종류				선언 위치						생성시기
클래스 변수 (class variable)		클래스 영역						클래스가 메모리에 올라갈 때
인스턴스 변수 (instance variable)	클래스 영역						인스턴스가 생성되었을 때
지역변수 (local variable)		클래스 영역 이외의 영역(메소드, 생성자, 초기화 블럭 내부)		변수 선언문이 수행되었을 때

1. 인스턴스 변수 (instance variable)
- 클래스 영역에 선언되며, 인스턴스를 생성할 때 만들어진다. 그래서 인스턴스 변수(iv)의 값을 읽어 오거나 저장하려면 먼저 인스턴스를 생성해야한다.
인스턴스마다 별도의 저장공간을 가지므로 서로 다른 값을 가질 수 있다. 인스턴스마다 고유한 상태를 유지해야하는 속성의 경우, 인스턴스 변수로 선언한다.

2. 클래스 변수 (class variable)
- 클래스 변수를 선언하는 방법은 인스턴스 변수(iv) 앞에 static을 붙이기만 하면 된다. 인스턴스마다 독립적인 저장공간을 갖는 인스턴스 변수와는 달리, 클래스 변수는 모든 인스턴스가 공통된 저장공간(변수)을 공유하게 된다.
한 클래스의 모든 인스턴스들이 공통적인 값을 유지해야하는 속성의 경우, 클래스 변수로 선언해야 한다.
클래스 변수는 인스턴스 변수와 달리 인스턴스를 생성하지 않고 언제라도 바로 사용할 수 있다는 특징이 있으며, '클래스 이름.클래스 변수'와 같은 형식으로 사용한다.

3. 지역변수 (local variable)
- 메소드 내에 선언되어 메소드 내에서만 사용 가능하며, 메소드가 종료되면 소멸되어 사용할 수 없게 된다.
for문 또는 while문의 블럭 내에 선언된 변수는, 지역변수가 선언된 블럭 {} 내에서만 사용 가능하며, 블럭 {}을 벗어나면 소멸되어 사용할 수 없게 된다.
우리가 지금까지 선언한 변수들은 모두 지역변수이다.

인스턴스 변수는 인스턴스가 생성될 때 마다 생성되므로 인스턴스마다 각기 다른 값을 유지할 수 있지만, 클래스 변수는 모든 인스턴스가 하나의 저장공간을 공유하므로, 항상 공통된 값을 갖는다.


