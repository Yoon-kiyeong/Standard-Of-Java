상속
상속이란, 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것이다.
상속을 통해서 클래스를 작성하면 보다 적은 양의 코드로 새로운 클래스를 작성할 수 있고 코드를 공통적으로 관리할 수 있기 때문에 코드의 추가 및 변경이 매우 용이하다.
이러한 특징은 코드의 재사용성을 높이고 코드의 중복을 제거하여 프로그램의 생산성과 유지보수에 크게 기여한다.
자바에서 상속을 구현하는 방법은 아주 간단하다.
새로 작성하고자 하는 클래스의 이름 뒤에 상속받고자 하는 클래스의 이름을 키워드 'extends'와 함께 써 주기만 하면 된다.
클래스 간의 상속관계를 그림으로 포현한 것을 상속계층도(class hierarchy)라고 한다.
자손 클래스는 조상 클래스의 모든 멤버를 상속받기 때문에, Child클래스는 Parent클래스의 멤버들을 포함한다고 할 수 있다.
클래스는 멤버들의 집합이므로 클래스 Parent와 Child의 관계를 다음과 같이 표현할 수 있다.

만일 Parent클래스에 age라는 정수형 변수를 멤버변수로 추가하면, 자손 클래스는 조상의 멤버를 모두 상속받기 때문에, Child클래스는 자동적으로 age라는 멤버변수가 추가된 것과 같은 효과를 얻는다.

class Parent {
	int age;
}

class Child extends Parent {}

이번엔 반대로 자손인 Child클래스에 새로운 멤버로 play() 메소드를 추가해보자.

class Parent {
	int age;
}

class Child extends Parent {
	void Play() {
		System.out.println("놀자~");
	}
}

Child클래스에 새로운 코드가 추가되어도 조상인 Parent클래스는 아무런 영향도 받지 않는다.
여기서 알 수 있는 것처럼, 조상 클래스가 변경되면 자손 클래스는 자동적으로 영향을 받게 되지만, 자손 클래스가 변경되는 것은 조상 클래스에 아무런 영향을 주지 못한다.

자손 클래스는 조상 클래스의 모든 멤버를 상속 받으므로 항상 조상 클래스보다 같거나 많은 멤버를 갖는다.
즉, 상속에 상속을 거듭할수록 상속받는 클래스의 멤버 개수는 점점 늘어나게 된다.
그래서 상속을 받는다는 것은 조상 클래스를 확장(extend)한다는 의미로 해석할 수도 있으며 이것이 상속에 사용되는 키워드가 'extends'인 이유이기도 한다.

-자손 클래스는 조상 클래스의 모든 멤버를 상속받는다.
(단, 생성자와 초기화 블럭은 상속되지 않는다.)
-자손 클래스의 멤버 개수는 조상 클래스보다 항상 같거나 많다.

클래스 간의 관계 - 포함관계
지금까지 상속을 통해 클래스 간에 관계를 맺어 주고 클래스를 재사용하는 방법에 대해서 알아보았다.
상속 이외에도 클래스를 재사용하는 또 다른 방법이 있는데, 그것은 클래스 간에 '포함(composite)'관계를 맺어 주는 것이다.
클래스 간의 포함관계를 맺어 주는 것은 한 클래스의 멤버변수로 다른 클래스 타입의 참조변수를 선언하는 것을 뜻한다.

원(Circle)을 표현하기 위한 Circle클래스와 좌표 상의 한 점을 다루기 위한 Point클래스를 다음과 같이 작성되었다고 가정하자.
class Circle {				class Point {
	int x;	//원점의 x좌표			int x;	//x좌표
	int y;	//원점의 y좌표			int y;	//y좌표
	int r;	//반지금(radius)		}
}

Point 클래스를 재사용해서 Circle클래스를 작성한다면 다음과 같이 할 수 있을 것이다.
class Circle {				class Circle {
	int x;	//원점의 x좌표			Point c = new Point(); //원점
	int y;	//원점의 y좌표	->		int r;
	int r;	//반지금(radius)		}
}

이와 같이 한 클래스를 작성하는 데 다른 클래스를 멤버변수로 선언하여 포함시키는 것은 좋은 생각이다.
하나의 거대한 클래스를 작성하는 것보다 단위별로 여러 개의 클래스를 작성한 다음, 이 단위 클래스들을 포함관계로 재사용하면 보다 간결하고 손쉽게 클래스를 작성할 수 있다.
또한 작성된 단위 클래스들은 다른 클래스를 작성하는데 재사용될 수 있을 것이다.

class Car {
	Engine e = new Engine();	//엔진
	Door[] d = new Door[4];	//문, 문의 개수를 넷으로 가정하고 배열로 처리했다.
	//...
}

클래스 간의 관계 결정하기
클래스를 작성하는데 있어서 상속관계를 맺어 줄 것인지 포함관계를 맺어 줄 것이닞 결정하는 것은 때때로 혼돈스러울 수 있다.
전에 예를 든 Circle클래스의 경우, Point클래스를 포함시키는 대신 상속관계를 맺어 주었다면 다음과 같을 것이다.

class Circle {				class Circle  extends Point {
	Point c = new Point();	->		int r;
	int r;				}
}

두 경우를 비교해 보면 Circle클래스를 작성하는데 있어서 Point클래스를 포함시키거나 상속받도록 하는 것은 결과적으로 별 차이가 없어 보인다.
그럴 때는 '~은 ~이다(is - a)'와 '~은 ~을 가지고 있다(has - a)'를 넣어서 문장을 만들어 보면 클래스 간의 관계가 보다 명확해 진다.

원(Circle)은 점(Point)이다. - Circle is a Point
원(Circle)은 점(Point)을 가지고 있다. - Circle has a Point

원은 원점(Point)과 반지름으로 구성되므로 위의 두 문장을 비교해 보면 첫 번째 문장보다 두 번째 문장이 더 옳다는 것을 알 수 있을 것이다.
이처럼 클래스를 가지고 문장을 만들었을 때 '~은 ~이다'라는 문장이 성립한다면, 서로 상속관계를 맺어 주고, '~은 ~을 가지고 있다'는 문장이 성립한다면 포함관계를 맺어 주면 된다.
그래서 Circle클래스와 Point클래스 간의 관계는 상속관계보다 포함관계를 맺어 주는 것이 더 옳다.

몇 가지 더 예를 들면, Car클래스와 SportCar클래스는 'SportsCar는 Car이다'와 같이 문장을 만드는 것이 더 옳기 때문에 이 두 클래스는 Car클래스를 조상으로 하는 상속관계를 맺어 주어야 한다.
Card클래스와 Deck클래스는 'Deck은 Card를 가지고 있다.'와 같이 문장을 만드는 것이 더 옳기 때문에 Deck클래스에 Card클래스를 포함시켜야 한다.

상속관계 : '~은 ~이다. (is - a)'
포함관계 : '~은 ~을 가지고 있다. (has - a)'





