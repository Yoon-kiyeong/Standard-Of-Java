다형성(polymorphism)
다형성이란 '여러 가지 형태를 가질 수 있는 능력'을 의미하며, 자바에서는 한 타입의 참조변수로 여러 타입의 객체를 참조할 수 있도록 함으로써 다형성을 프로그램적으로 구현하였다.
이를 좀 더 구체적으로 말하자면, 조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조할 수 있도록 하였다는 것이다. 예제를 통해서 보다 자세히 알아보도록 하자.

class Tv {
	boolean power;	//전원상태 (on/off)
	int channel;	//채널

	void power() { power = !power; }
	void channelUp() { ++channel; }
	void channelDown() { --channel; }
	
}

class SmartTv extends Tv {
	String text;	//캡션(자막)을 보여 주기 위한 문자열
	void caption () { /* 내용생략 */ }
}

지금까지 우리는 생성된 인스턴스를 다루기 위해서, 인스턴스의 타입과 일치하는 타입의 참조변수만을 사용한다.
즉, Tv 인스턴스를 다루기 위해서는 Tv타입의 참조변수를 사용하고, SmartTv인스턴스를 다루기 위해서는 SmartTv타입의 참조변수를 사용했다.

Tv t = new Tv();
SmartTv = new SmartTv();

이처럼 인스턴스의 타입과 참조변수의 타입이 일치하는 것이 보통이지만, Tv와 SmartTv클래스가 서로 상속관계에 있을 경우, 다음과 같이 조상 클래스 타입의 참조변수로 자손 클래스의 인스턴스를 참조하도록 하는 것도 가능하다.

tv t = new SmartTv();	//타입 불일치, 조상 타입의 참조변수로 자손 인스턴스를 참조

이제 인스턴스를 같은 타입의 참조변수로 참조하는 것과 조상타입의 참조변수로 참조하는 것은 어떤 차이가 있는지에 대해서 알아보도록 하자.

SmartTv s = new SmartTv();	//참조 변수와 인스턴스의 타입이 일치
Tv t = new SmartTv();	//조상 타입 참조변수로 자손 타입 인스턴스 참조

위의 코드에서 SmartTv인스턴스 2개를 생성하고, 참조변수 s와 t가 생성된 인스턴스를 하나씩 참조하도록 하였다.
이 경우 실제 인스턴스가 SmartTv타입이라 할지라도, 참조변수 t로는 SmartTv인스턴스의 모든 멤버를 사용할 수 없다.
Tv타입의 참조변수로는 SmartTv인스턴스 중에서 Tv클래스의 멤버들(상속받은 멤버포함)만 사용할 수 있다.
따라서, 생성된 SmartTv인스턴스의 멤버 중에서 Tv클래스 에 정의 되지 않은 멤버, text와 caption()은 참조변수 t로 사용기 불가능하다.
즉, t.text 또는 t.caption()와 같이 할 수 없다는 것이다.
둘 다  같은 타입의 인스턴스지만 참조변수의 타입에 따라 사용할 수 있는 멤버의 개수가 달라진다.
반대로 아래와 같이 자손타입의 참좁녀수로 조상타입의 인스턴스를 참조하는 것은 가능할까?

SmartTv s = new Tv();	//에러. 허용 안 됨

그렇지 않다. 위의 코드를 컴파일 하면 에러가 발생한다. 그 이유는 실제 인스턴스인 Tv의 멤버 개수보다 참조변수 s가 사용할 수 있는 멤버 개수가 더 많기 때문이다.
그래서 이를 허용하지 않는다.

조상타입의 참조변수로 자손타입의 인스턴스를 참조할 수 있다.
반대로 자손타입의 참조변수로 조상타입의 인스턴스를 참조할 수는 없다.