추상 클래스(abstract class)
클래스를 설계도에 비유한다면, 추상 클래스는 미완성 설계도에 비유할 수 있다. 미오나성 설계도란, 단어의 뜻 그대로 완성되지 못한 채로 남겨진 설계도를 말한다.
클래스가 미완성이라는 것은 멤버의 개수에 관계된 것이 아니라, 단지 미완성 메소드(추상 메소드)를 포함하고 있다는 의미이다.
미완성 설계도로 완성된 제품을 만들 수 없듯이 추상 클래스로 인스턴스는 생성할 수 없다.
추상 클래스는 상속을 통해서 자손클래스에 의해서만 완성될 수 있다.

추상 클래스	미완성 설계도, 인스턴스 생성불가
		미완성 메소드(추상 메소드)를 포함하고 있는 클래스

추상 클래스 자체로는 클래스로서의 역할을 다 못하지만, 새로운 클래스를 작성하는데 있어서 바탕이 되는 조상 클래스로서 중요한 의미를 갖는다.
새로운 클래스를 작성할 때 이무 것도 없는 상태에서 시작하는 것보다는 완전하지는 못하더라도 어느 정도 틀을 갖춘 상태에서 싲가하는 것이 나을 것이다.
실생활에서 예를 들자면, 같은 크기의 TV라도 기능의 차이에 따라 여러 종류의 모델이 있지만, 사실 이 들의 설계도는 아마 90%정도는 동일할 것이다.
서로 다른 세 개의 설계도를 따로 그리는 것보다는 이들의 공통부분만을 그린 미완성 설계도를 만들어 놓고, 이 미완성 설계도를 이용해서 각각의 설계도를 완성하는 것이 훨씬 효율적일 것이다.

추상 클래스는 키워드 'abstract'를 붙이기만 하면 된다. 이렇게 함으로써 이 클래스를 사용할 때, 클래스 선언부의 abstract를 보고 이 클래스에는 추상메소드가 있으니 상속을 통해서 전해주어야 한다는 것을 쉽게 알 수 있을 것이다.

abstract class 클래스 이름 {
	...
}

추상 클래스는 추상 메소드를 포함하고 있다는 것을 제외하고는 일반 클래스와 전혀 다르지 않다. 추상 클래스에도 생성자가 있으며, 멤버변수와 메소드도 가질 수 있다.

추상 메소드(abstract method)
메소드는 선언부와 구현부(몸통)로 구성되어 있다고 했다.
선언부만 작성하고 구현부는 작성하지 않은 채로 남겨 둔 것이 추상메소드이다. 즉, 설계만 해 놓고 실제 수행될 내용은 작성하지 않았기 때문에 미완성 메소드인 것이다.
메소드를 이와 같이 미완성 상태로 남겨 놓은 이유는 내용이 생속받는 클래스에 따라 달라질 수 있기 때문에 조상 클래스에서는 선언부만 작성하고, 주석을 덧붙여 어떤 기능을 수행할 목적으로 작성되었는지 알려 주고, 실제 내용은 상속받는 클래스에서 구현하도록 비워 두는 것이다.
그래서 추상클래스를 상속받는 자손 클래스는 조상의 추상메소드를 상황에 맞게 적절히 구현해주어야 한다.
추상메소드 역시 키워드 'abstract'를 앞에 붙여 주고, 추상메소드는 구현부가 없으므로 괄호{} 대신 문장의 끝을 알리는 ';'을 적어준다

/* 주석을 통해 어떤 기능을 수행할 목적으로 작성하였는지 설명한다. */
abstract 리턴타입 메소드이름();

추상클래스로부터 상속받는 자손클래스는 오버라이딩을 통해 조상인 추상클래스의 추상메소드를 모두 구현해주어야 한다.
만일 조상으로부터 상속받은 추상메소드 중 하나라도 구현하지 않는다면, 자손클래스 역시 추상클래스로 지정해 주어야 한다.

abstract class Player {
	abstract void play(int pos);		//추상메소드
	abstract void stop();		//추상메소드
}

class AudioPlayer extends Player {
	void play(int pos) { /* 내용 생략 */ }	//추상메소드를 구현
	void stop() { /* 내용 생략 */ }	//추상메소드를 구현
}

abstract class AbstractPlayer extends Player {
	void play(int pos) { /* 내용 생략 */ }	//추상메소드를 구현
}

실제 작업내용인 구현부가 없는 메소드가 무슨 의미가 있을까 싶기도 하겠지만, 메소드를 작성할 때 실제 작업내용인 구현부보다 더 중요한 부분이 선언부이다.
메소드를 사용하는 쪽에서는 메소드가 실제로 어떻게 구현되어있는지 몰라도 메소드의 이름과 매개변수, 리턴타입, 즉 선언부만 알고 있으면 되므로 내용이 없을 지라도 추상메소드를 사용하는 코드를 작성하는 것이 가능하며, 실제로는 자손클래스에 구현된 완성된 메소드가 호출되도록 할 수 있다.

추상클래스의 작성
여러 클래스에 공통적으로 사용될 수 있는 클래스를 바로 작성하기도 하고, 기존의 클래스의 공통적인 부분을 뽑아서 추상클래스로 만들어 상속하도록 하는 경우도 있다.
참고로 추상의 사전적 정의는 다음과 같다.

추상(抽象)	낱낱의 구체적 표상(表象)이나 개념에서 공통된 성질을 뽑아 이를 일반적인 개념으로 파악하는 정신 작용

상속이 자손 클래스를 만드는데 조상 클래스를 사용하는 것이라면, 이와 반대로 추상화는 기존의 클래스의 공통부분을 뽑아내서 조상 클래스를 만드는 것이라고 할 수 있다.
추상화를 구체화와 반대되는 의미로 이해하면 보다 쉽게 이해할 수 있을 것이다. 상속계층도를 따라 내려갈수록 클래스는 점점 기능이 추가되어 구체화의 정도가 심해지며, 상속계층도를 따라 올라갈수록 클래스는 추상화의 정도가 심해진다고 할 수 있다.
즉, 상속계층도를 따라 내려 갈수록 세분화되며, 올라갈수록 공통요소만 남게 된다.

유명한 컴퓨터 게임에 나오는 유닛들을 클래스로 간단히 정의해보았다. 이 유닛들은 각자 나름대로의 기능을 가지고 있지만 공통부분을 뽑아내어 하나의 클래스로 만들고, 이 클래스로부터 상속받도록 변경해보자.

class Marine {	//보병
	int x, y;	//현재 위치
	void move(int x, int y) 	{ /*지정된 위치로 이동 */ }
	void stop() 		{ /* 현재 위치에 정지 */ }
	void stimPack() 		{ /* 스팀팩을 사용한다 */ }
}

class Tank {	//탱크
	int x, y;	//현재 위치
	void move(int x, int y) 	{ /* 지정된 위치로 이동 */ }
	void stop() 		{ /* 현재 위치에 정지 */ }
	void changeMode() 	{ /* 공격모드를 변환한다. */ }
}

class Dropship {	//수송선
	int x, y;	//현재 위치
	void move(int x, int y) 	{ /* 지정된 위치로 이동 */ }
	void stop() 		{ /* 현재 위치에 정지 */ }
	void load() 		{ /* 선택된 대상을 태운다. */ }
	void unload() 		{ /* 선택된 대상을 내린다. */ }
}

abstract class Unit {
	int x, y;
	abstrat void move(int x, int y);
	void stop() 		{ /* 현재 위치에 정지 */ }
}

class Marine extends Unit {	//보병
	void move(int x, int y) 	{ /*지정된 위치로 이동 */ }
	void stimPack() 		{ /* 스팀팩을 사용한다 */ }
}

class Tank extends Unit {	//탱크
	void move(int x, int y) 	{ /* 지정된 위치로 이동 */ }
	void changeMode() 	{ /* 공격모드를 변환한다. */ }
}

class Dropship extends Unit {
	void move(int x, int y) 	{ /* 지정된 위치로 이동 */ }
	void load() 		{ /* 선택된 대상을 태운다. */ }
	void unload() 		{ /* 선택된 대상을 내린다. */ }
}

각 클래스의 공통부분을 뽑아내서 Unit클래스를 정의하고 이로부터 상속받도록 하였다.
이 Unit클래스는 다른 유닛을 위한 클래스를 작성하는데 재호라용될 수 있을 것이다.
이들 클래스에 대해서 stop메소드는 선언부와 구현부 모두 공통적이지만, Marine, Tank는 지상유닛이고 Dropship은 공중유닛이기 때문에 이동하는 방법이 서로 달라서 move 메소드의 실제 구현 내용이 다를 것이다.
그래도 move메소드의 선언부는 같기 때문에 추상메소드로 정의할 수 있다. 최대한의 공통부분을 뽑아내기 위한 것이기도 하지만, 모든 유닛은 이동할 수 있어야 하므로 Unit클래스에는 move메소드가 반드시 필요한 것이기 때문이다.
move메소드가 추상메소드로 선언된 것에는, 앞으로 Unit클래스를 상속받아서 작성되는 클래스는 move메소드를 자신의 클래스에 알맞게 반드시 구현해야 한다는 의미가 담겨 있는 것이기도 하다.

Unit[] group = new Unit[3];
group[0] = new Marine();
group[1] = new Tank();
group[2] = new Dropship();

for(int i = 0; i < group.length; i++) 
	group[i].move(100,200);	//Unit배열의 모든 유닛을 좌표(100,200)의 위치로 이동한다.











































