제어자(modifier)
제어자(modifier)는 클래스, 변수 또는 메소드의 선언부에 함께 사용되어 부가적인 의미를 부여한다.
제어자의 종류는 크게 접근 제어자와 그 외의 제어자로 나눌 수 있다.

접근 제어자 : public, protected, (default), private
그 외 : static, final, abstract, native, transient, synchronized, volatile, strictfp

제어자는 클래스나 멤버변수와 메소드에 주로 사용되며, 하나의 대상에 대해서 여러 제어자를 조합하여 사용하는 것이 간으하다.
단, 접근 제어자는 한 번에 네 가지 중 하나만 선택해서 사용할 수 있다. 즉, 하나의 대상에 대해서 public과 private를 함께 사용할 수 없다는 것이다.
(참고 : 제어자들 간의 순서는 관계 없지만 주로 접근 제어자를 제일 왼쪽에 놓는 경향이 있다.)

접근 제어자 외에도 여러 제어자가 있으나, static, final, abstract를 제외하고는 자주 사용되지 않는다.

static - 클래스의, 공통적인
static은 '클래스의' 또는 '공통적인'의 의미를 가지고 있다. 인스턴스 변수는 하나의 클래스로부터 생성되었더라도 각기 다른 값을 유지하지만, 클래스 변수(static멤버변수)는 인스턴스에 관계없이 같은 값을 갖는다.
그 이유는 하나의 클래스 변수를 모든 인스턴스가 공유하기 때문이다.
static이 붙은 멤버변수와 메소드, 그리고 초기화 블럭은 인스턴스가 아닌 클래스에 관계된 것이기 때문에 인스턴스를 생성하지 않고도 사용할 수 있다.
인스턴스메소드와 static메소드의 근본적인 차이는 메소드 내에서 인스턴스 멤버를 사용하는가의 여부에 있다.

static이 사용될 수 있는 곳 - 멤버변수, 메소드, 초기화 블럭

제어자	대상			의미
	멤버변수	- 모든 인스턴스에 공통적으로 사용되는 클래스 변수가 된다.
		- 클래스 변수는 인스턴스를 생성하지 않고도 사용 가능하다.
static		- 클래스가 메모리에 로드될 때 생성된다.

	메소드	- 인스턴스를 생성하지 않고도 호출이 가능한 static 메소드가 된다.
		- static메소드 내에서는 인스턴스멤버들을 직접 사용할 수 없다.

인스턴스 멤버를 사용하지 않는 메소드는 static을 붙여서 static메소드로 선언하는 것을 고려해보도록 하자.
가능하다면 static메소드로 하는 것이 인스턴스를 생성하지 않고도 호출이 가능해서 더 편리하고 속도도 더 빠르다.

class staticTest {
	static int width = 200;	//클래스 변수(static 변수)
	static int height = 120;	//클래스 변수(static 변수)

	static {			//클래스 초기화 블럭
		//static변수의 복잡한 초기화 수행
	}

	static int max(int a, int b) {	//클래스 메소드(static 메소드)
		return a > b ? a : b;
	}
}

