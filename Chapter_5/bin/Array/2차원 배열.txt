2차원 배열의 선언
2차원 배열을 선언하는 방법은 1차원 배열과 같다. 다만 대괄호[]가 하나 더 들어갈 뿐이다.

선언 방법			선언 예	
타입[][] 변수이름;		int[][] score;
타입 변수이름[][];		int score[][];
타입[] 변수이름[];		int[] score[];
(참고 : 3차원 이상의 고차원 배열의 선언은 대괄호[]의 개수를 차원의 숨나큼 추가해 주기만 하면 된다.)

2차원 배열은 주로 테이블 형태의 데이터를 담는데 사용되며, 만일 4행 3열의 데이터를 담기 위한 배열을 생성하려면 다음과 같이 한다.
int[][] score = new int[4][3];		//4행 3열의 2차원 배열을 생성한다.
배열을 생성하면, 배열의 각 요소에는 배열오소 타입의 기본값이 자동적으로 저장된다.

2차원 배열의 인덱스
2차원 배열은 행(row)과 열(column)로 구성되어 있기 때문에 index도 행과 열에 각각 하나씩 존재한다.
'행index'의 범위는 '0 ~ 행의 길이 -1'이고 '열index'의 범위는 '0 ~ 열의 길이 -1'이다.
그리고 2차원 배열의 각 요소에 접근하는 방법은 '배열이름[행index][열index]'이다.

2차원 배열의 초기화
2차원 배열도 괄호{}를 사용해서 생성과 초기화를 동시에 할 수 있다. 다만, 1차원 배열보다 괄호{}를 한번 더 써서 행렬로 구분해 준다.
int[][] arr = new int[][]{ {1,2,3,}, {4,5,6} };
int[][] arr = { {1,2,3}, {4,5,6} }; 	//new int[][]가 생략됨

크기가 작은 배열은 위와 같이 간단히 한 줄로 써주는 것도 좋지만, 가능하면 다음과 같이 행별로 줄 바꿈을 해주는 것이 보기도 좋고 이해하기 쉽다.
int[][] arr = {
		{1,2,3},
		{4,5,6}
	};

Arrays로 배열 다루기
Arrays클래스는 배열을 다루는데 유용한 메소드를 제공한다.

배열의 비교와 출력 - equals(), toString()
toString()배열의 모든 요소를 문자열로 편하게 출력할 수 있다. 
toString()은 일차원 배열에서만 사용할 수 있으므로, 다차원 배열에는 deepToString()을 사용해야 한다. deepToString()은 배열의 모든 요소를 재귀적으로 접근해서 문자열을 구성하므로 2차원뿐만 아니라 3차원 이상의 배열에도 동작한다.

int[] arr = {0,1,2,3,4};
int[][] arr2D = {{11,12}, {21,22}};
System.out.println(Arrays.toString(arr));	//[0,1,2,3,4]
System.out.println(Arrays.deepToString(arr2D));	//[[11,12],[21,22]]

equals()는 두 배열에 저장된 모든 요소를 비교해서 같으면 true, 다르면 false를 반환한다.
equals()도 일차원 배열에만 사용 가능하므로, 다차원 배열의 비교에는 deepEquals()를 사용해야 한다.

String[][] str2D = new String[][]{{"arr","bbb"},{"AAA","BBB}};
String[][] str2D2 = new String[][]{{"aaa","bbb"},{"AAA","BBB"}};

배열의 복사 - copyOf(), copyOfRange()
copyOf()는 배열 전체를, copyOfRange()는 배열의 일부를 복사해서 새로운 배열을 만들어 반환한다. 늘 그렇듯이 copyOfRange()에 지정된 범위의 끝은 포함되지 않는다.
int[] arr = {0,1,2,3,4};
int[] arr2 = Arrays.copyOf(arr, arr.length);	//arr2 = [0,1,2,3,4]
int[] arr3 = Arrays.copyOf(arr,3);		//arr3 = [0,1,2]
int[] arr4 = Arrays.copyOfRange(arr, 7);	//arr4 = [0,1,2,3,4,0,0]
int[] arr5 = Arrays.copyOfRange(arr, 2, 4);	//arr5 = [2,3] <- 4는 불포함
int[] arr6 = Arrays.copyOfRange(arr, 0, 7);	//arr6 = [0,1,2,3,4,0,0]

배열의 정렬 - sort()
배열을 정렬할 때는 sort()를 사용한다.
int[] arr = {3,2,0,1,4};
Arrays.sort(arr);	//배열 arr을 정렬한다.
System.out.println(Arrays.toString(arr));	//[0,1,2,3,4]