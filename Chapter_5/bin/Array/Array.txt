배열이란?
같은 타입의 여러 변수를 하나의 묶음으로 다루는 것을 '배열(Array)'이라고 한다.
"배열은 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것"
여기서 중요한 것은 '같은 타입'이어야 한다는 것이며, 서로 다른 타입의 변수들로 구성된 배열은 만들 수 없다.
변수 대신 배열을 이용하면 간단히 처리할 수 있다.
변수의 선언과 달리 다뤄야 할 데이터의 수가 아무리 많아도 단지 배열의 길이만 바꾸면 된다.
변수와 달리 배열은 각 저장공간이 연속적으로 배치되어 있다는 특징이 있다

배열의 선언과 생성
배열을 생성하는 방법은 간단하다. 원하는 타입의 변수를 선언하고 변수 또는 타입에 배열임을 의미하는 대괄호[]를 붙이면 된다.
대괄호[]는 타입 뒤에 붙여도 되고 변수이름 뒤에 붙여도 된다.

배열의 생성
배열을 선언한 다음에는 배열을 생성해야한다. 배열은 선언하는 것은 단지 생성된 배열을 다루기 위한 참조변수를 위한 공간이 만들어질 뿐이고,
배열을 생성해야만 비로소 값을 저장할 수 있는 공간이 만들어지는 것이다. 배열을 생성하기 위해서는 연산자 'new'와 함게 배열의 타입과 길이를 지정해 주어야 한다.
타입[] 변수이름;		//배열을 선언 (배열을 다루기 위한 참조변수 선언)
변수이름 = new 타입[길이];	//배열을 생성 (실제 저장공간을 생성)

배열의 인덱스
생선된 배열의 각 저장공간을 '배열의 요소(element)'라고 하며, '배열이름[인덱스]'의 형식으로 배열의 요소에 접근한다.
인덱스(index)는 배열의 요소마다 붙여진 일련번호로 각 요소를 구별하는데 사용된다.
인덱스는 1이 아닌 0부터 시작한다.
배열에 값을 저장하고 읽어오는 방법은 변수와 같다. 단지 변수이름 대신 '변수이름[인덱스]'를 사용한다는 점만 다르다.
배열의 또 다른 장점은 index로 상수 대신 변수나 수식도 사용할 수 있다는 것이다.

배열의 길이(배열이름.length)
자바에서는 자바 가상 머신(JVM)이 모든 배열의 길이를 별도로 관리하며, '배열이름.length'를 통해서 배열의 길이에 대한 정보를 얻을 수 있다.
배열은 한번 생선하면 기이를 변경할 수 없기 때문에, 이미 생성된 배열의 길이는 변하지 않는다.
따라서 '배열이름.length'는 상수다. 즉, 값을 읽을 수만 있을 뿐 변경할 수 없다.
'배열이름.length'는 배열의 길이가 변경되면 자동적으로 변경된 배열의 길이를 값으로 갖기 대문에, 배열과 함께 사용되는 for문의 조건식을 일일히 변경해주지 않아도 된다.

배열의 초기화
배열은 생성과 동시에 자동적으로 기본값(0)으로 초기화되므로 배열을 사용하기 전에 따로 초기화를 해주지 않아도 되지만, 원하는 값을 저장하려면 각 요소마다 값을 저장해 줘야한다.
배열의 길이가 큰 경우에는 요소 하나하나에 값을 지정하기 보다는 for문을 사용하는 것이 좋다.
그러나 for문으로 배열을 초기화하려면, 저장하려는 값에 일정한 규칙이 있어야만 가능하기 때문에 자바에서는 다음과 같이 간단히 초기화 할 수 있는 방법을 제공한다.
int[] score = new int[]{50,60,70,80,90};		//배열의 생성과 초기화를 동시에
저장할 값들을 괄호{} 안에 쉼표로 구분해서 나열하면 되며, 고라호 {} 안의 값의 개수에 의해 배열의 길이가 자동으로 결정되기 때문에 괄호[] 안에 배열의 길이는 안적어도 된다.
int[] score = new int[] {50,60,70,80,90};
int[] score = {50,60,70,80,90};		//new int[]를 생략할 수 있음
심지어는 위와 같이 'new 타입[]'을 생략하여 코드를 더 간단히 할 수도 있다.
아무래도 생략된 형태의 코드가 더 간단하므로 자주 사용된다. 다만 다음과 같이 배열의 선언과 생성을 따로 하는 경우에는 생략할 수 없다는 점만 주의하면 된다.
int[] score;
score = {50,60,70,80,90};			//에러. new int[]를 생략할 수 없음
score = new int[] {50,60,70,80,90};		//OK

배열의 출력
배열을 초기화할 때 for문을 사용하듯이, 배열에 저장된 값을 확인할 때도 다음과 같이 for문을 사용하면 된다.
int[] iArr = {100,95,80,70,60};
for {int i=0;i<iArr.length;i++} {		//배열의 요소를 순서대로 하나씩 출력
	System.out.println(iArr[i]);
}
print메소드는 출력 후에 줄 바꿈을 하므로, 여러 줄에 출력되어 보기 불편할 때가 있다. 그럴때는 다음과 같이 출력 후에 줄 바꿈을 하지 않는 print메소드를 사용하자.
int[] iArr = {100,95,80,70,60};
for(int i=0; i < iArr.length; i++) {
	System.out.print(iArr[i]+",");		//각 요소 간의 구별을 위해 쉼푤르 넣는다.
}
System.out.println();			//다음 출력이 이어지지 않도록 줄 바꿈을 한다.
더 간단한 방법은 'Arrays.toString(배열이름)'메소드를 사용하는 것이다. 이 메소드는 배열의 모든 요소를 '[첫번째 요소, 두번째 요소,...]'와 같은 형식의 문자열로 만들어서 반환한다.
이 메소드와 관련된 내용들이 더 있지만, 진도를 나가면서 자연스럽게 알게 될 것들이므로 지금은 이 메소드를 이용하면 배열의 내용을 쉽게 확인할 수 있다는 정도만 알아두자.
(참고: Arrays.toString()을 사용하려면, 'import.java.util.Arrays;'를 추가해야 한다. 이클립스 단축키 Ctrl + Shift + O)
int[] iArr = {100,95,80,70,60};
//배열 iArr의 모든 요소를 출력한다. [100,95,80,70,60]이 출력된다.
System.out.println(Array.toString(iArr));
만일 iArr의 값을 바로 출력하면 어떻게 될까? '타입@주소'의 형식으로 출력된다. 배열을 가리키는 참조변수를 출력해준다.
예외적으로 char배열은 println메소드로 출력하면 각 요소가 구분자 없이 그대로 출력되는데, 이것은 println메소드가 char배열일 때만 이렇게 동작하도록 작성되었기 때문이다.
char[] chArr = {'a','b','c','d'};
System.out.println(chArr);			//abcd가 출력된다.
